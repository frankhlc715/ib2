<?xml version="1.0"?>

<project name="ib2" default="usage" basedir=".">

	<!-- ===================== Initialize Properties ======================= -->
	<property file="build.properties" />
	<property environment="SystemVariable" />
	<!-- Path location(s) for java source files -->
	<path id="source.path">
		<pathelement location="${source.dir}" />
	</path>

	<!-- The most basic compile classpath -->
	<path id="base.compile.classpath">
		<pathelement location="${target.classes.dir}" />
	</path>

	<!-- The default project compile classpath -->
	<path id="project.compile.classpath">
		<path refid="base.compile.classpath" />
		<path refid="all.libs.classpath" />
	</path>

	<!-- Catch all 3rd-party lib classpath -->
	<path id="all.libs.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${tomcat.dir}/lib">
			<include name="servlet-api.jar" />
		</fileset>
		<fileset dir="${SystemVariable.JAVA_HOME}/jre/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- ===================== Test Execution Defaults ======================= -->

	<!-- Unit test classpath -->
	<path id="test.classpath">
		<path refid="project.compile.classpath" />
		<pathelement location="${target.conf.dir}" />
		<pathelement location="${test.dir}" />
		<pathelement location="${target.tests.dir}" />
	</path>

	<!-- ===================== Patterns for File Copies ================= -->

	<patternset id="config.files">
		<include name="**/*.xml" />
		<include name="**/*.properties" />
		<include name="**/*.png" />
		<include name="**/*.zip" />
		<include name="**/*.ftl" />
	</patternset>

	<patternset id="image.files">
		<include name="**/*.png" />
		<include name="**/*.gif" />
		<include name="**/*.jpg" />
	</patternset>

	<patternset id="html.files">
		<include name="**/*.html" />
		<include name="**/*.htm" />
		<include name="**/*.css" />
	</patternset>

	<patternset id="scriptlet.files">
		<include name="**/*.jsp" />
	</patternset>
	
	<patternset id="std.files.to.filter">
		<patternset refid="config.files" />
		<include name="**/*.txt"/>
		<include name="**/*.html"/>
		<include name="**/*.htm"/>
		<include name="**/*.jsp"/>
	</patternset>
		
	<patternset id="std.files.not.to.filter">
		<exclude name="**/*.xml"/>
		<exclude name="**/*.properties"/>
		<exclude name="**/*.txt"/>
		<exclude name="**/*.html"/>
		<exclude name="**/*.htm"/>
		<include name="**/*.jsp"/>
	</patternset>
	
	<patternset id="webroot.config.files">
		<include name="**/*.xml" />
	</patternset>

	<patternset id="classes.config.files">
		<include name="**/*.xml" />
	</patternset>

	<patternset id="web.public.content.files">
		<patternset refid="config.files" />
		<patternset refid="image.files" />
		<patternset refid="html.files" />
		<include name="**/*.jsp"/>
		<include name="**/*.js" />
		<exclude name="WEB-INF/**" />
	</patternset>

	<patternset id="web.protected.content.files">
		<patternset refid="scriptlet.files" />
		<patternset refid="config.files" />
	</patternset>
	
	<patternset id="tomcat.config.files">
		<include name="**/*.xml" />
	</patternset>	

	<!-- ===================== Executable Targets ======================= -->
	<target name="init" description="Initialize and setup.">
		<tstamp />
		<echo message="-------- ${project.name} ${project.version} --------" />
		<filter token="project.name" value="${project.name}" />
		<filter token="project.package" value="${project.package}" />
		<filter token="project.version" value="${project.version}" />
	</target>

	<target name="build.prepare" depends="init" description="Prepare target target directory.">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.classes.dir}" />
		<mkdir dir="${target.tests.dir}" />
	</target>

	<target name="compile" depends="build.prepare" description="Compile java sources (incremental compile.)">
		<javac target="1.8" destdir="${target.classes.dir}" debug="${compile.debug}" deprecation="${compile.deprecation}" 
			encoding="UTF-8" source="${compile.source}" >
			<src refid="source.path" />
			<classpath refid="project.compile.classpath" />
		</javac>
		<antcall target="build.nonjava.sources" />
	</target>

	<target name="build.nonjava.sources" depends="build.prepare" description="Copy all non-java resources in the source tree to target area.">
		<copy todir="${target.classes.dir}">
			<fileset dir="${source.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="clean" description="Clean target build and distribution directories.">
		<delete dir="${target.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${target.classes.dir}" />
	</target>

	<target name="clean.compile" depends="clean,compile" description="Compile java sources (clean re-compile.)" />

	<!--
	<target name="war" depends="compile,expanded-war,create.distfile" description="Create a binary distribution without javadocs." />
	-->
	<target name="dist.prepare" depends="init" description="Create distribution directory">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${target.war.dir}" />
		<mkdir dir="${target.webinf.dir}" />
		<mkdir dir="${target.jsp.dir}" />
		<mkdir dir="${target.metainf.dir}" />
		<mkdir dir="${target.webclasses.dir}" />
		<mkdir dir="${target.weblib.dir}" />
	</target>

	<target name="expanded-war" depends="compile,dist.prepare" description="Copy files to dist directory.">
		<!-- Copy public web content: html, etc -->
		<copy todir="${target.war.dir}">
			<fileset dir="${web.dir}">
				<patternset refid="web.public.content.files" />
			</fileset>
		</copy>

		<!-- Copy protected web content: jsps, etc -->
		<copy todir="${target.webinf.dir}">
			<fileset dir="${webinf.dir}">
					<exclude name="classes/**"/>
			</fileset>
		</copy>
		
		<!-- copy business/persistence layer configuration files -->
		<copy todir="${target.webinf.dir}/classes" >
			<fileset dir="${conf.dir}">
				<exclude name="server.properties"/>
				<exclude name="merchant.properties"/>
				<exclude name="weixin.properties"/>
				<exclude name="logback.xml"/>
				<exclude name="application.properties"/>
			</fileset>
		</copy>
		
		<!-- copy java class files  -->
		<copy todir="${target.webinf.dir}/classes" >
			<fileset dir="${target.classes.dir}">
			</fileset>
		</copy>
		
		<!-- copy web-app specific jar file dependencies, projects may override  -->
		<copy todir="${target.weblib.dir}" >
			<fileset dir="${lib.dir}">
			</fileset>
		</copy>
	</target>

	<target name="war" depends="expanded-war" description="Create project distributable (war) file.">
		<!-- create a deployable WAR file for the entire application -->
		<war warfile="${project.war}" basedir="${target.war.dir}" webxml="${target.webinf.dir}/web.xml" duplicate="fail">
			<exclude name="WEB-INF/web.xml" />
			<include name="**/*" />
		</war>
	</target>

	<target name="javadoc" depends="compile,dist.prepare" unless="docs-uptodate" description="Create project API documentation.">
		<mkdir dir="${dist.javadocs.dir}" />
		<javadoc sourcepathref="source.path" destdir="${dist.javadocs.dir}" packagenames="*" author="true" private="${javadoc.private}" protected="${javadoc.protected}" version="true" overview="${source.dir}/overview.html" doctitle="&lt;h1&gt;${project.title} (Version ${project.version})&lt;/h1&gt;" windowtitle="${project.title} (Version ${project.version})" bottom="${copyright}">
			<classpath refid="project.compile.classpath" />
		</javadoc>
	</target>
	<!--
	<target name="war.javadoc" depends="war,javadoc" description="Create a binary distribution including javadocs." />
	-->
	<target name="usage">
		<echo message="" />
		<echo message="${project.name} build file" />
		<echo message="------------------------------------------------------" />
		<echo message="" />
		<echo message="Among the available targets are:" />
		<echo message="" />
		<echo message="clean --> clean all" />
		<echo message="compile --> build all; don't create distributable WAR" />
		<echo message="dist --> build all; create distributable WAR" />
		<echo message="dist.javadoc --> compile and create distributable WAR file and javadocs" />
		<echo message="run.tests -> run tests" />
		<echo message="" />
	</target>

	<!-- ===================== Unit Test Targets ======================= -->
	<target name="compile.tests" depends="compile" description="Compile project unit test cases.">
		<javac srcdir="${test.dir}" destdir="${target.tests.dir}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" source="${compile.source}">
			<classpath refid="test.classpath" />
		</javac>
		<copy todir="${target.tests.dir}" filtering="on">
			<fileset dir="${test.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="run.tests" depends="compile.tests" description="Run all project unit tests.">
		<mkdir dir="${tests.report.dir}" />
		<junit printsummary="yes" haltonfailure="no" haltonerror="no">
			<jvmarg line="-Djava.awt.headless=true"/>			
			<classpath refid="test.classpath" />
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${tests.report.dir}">
				<fileset dir="${target.tests.dir}" includes="${tests.includes}" excludes="${tests.excludes}" />
			</batchtest>
		</junit>
	</target>
</project>